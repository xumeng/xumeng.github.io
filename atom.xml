<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amon&#39;s Blog</title>
  
  <subtitle>猛猛如玉</subtitle>
  <link href="https://amonxu.com/atom.xml" rel="self"/>
  
  <link href="https://amonxu.com/"/>
  <updated>2024-05-24T11:55:41.809Z</updated>
  <id>https://amonxu.com/</id>
  
  <author>
    <name>Amon Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我是一个 HR，碰到疑似“外星人”，居然让我帮他修理星际飞船？！</title>
    <link href="https://amonxu.com/2024/05/24/zh-CN/2024-05-24-HR-uses-Jobot-to-help-an-alien-repair-a-spaceship/"/>
    <id>https://amonxu.com/2024/05/24/zh-CN/2024-05-24-HR-uses-Jobot-to-help-an-alien-repair-a-spaceship/</id>
    <published>2024-05-24T11:10:22.000Z</published>
    <updated>2024-05-24T11:55:41.809Z</updated>
    
    <content type="html"><![CDATA[<p>我是一个 HR，碰到疑似“外星人 ”，居然让我帮他修理星际飞船？！</p><p>本来我想拒绝，但是他大手一挥，我飞出了三米远。更没想到的是，四千年前的金字塔居然也和他有关！</p><p><img src="https://img.amonxu.com/file/cfb45defed13eac282b7c.png"></p><hr><p>就在两天前，一个普通的工作日午后，我结束了一上午繁忙的人事工作，关上屏幕，准备好好睡个午觉。</p><p>眼前的世界逐渐昏暗，窗外时不时传来汽车行驶和空调的运转声音，我的大脑慢慢降低频率，进入了睡眠模式 。</p><p>奇怪，我的身体仿佛在下沉，还没来及细想，下沉的速度变得越来越快，伴随着刺眼的光芒和巨大的轰鸣声，还没来及反应过来，身体就被一股强大的力量拉了下去，我失去了知觉。</p><hr><p>等再次醒来时，我还在办公室的工位上，但奇怪的是同事们都不见了。</p><p>一个身躯高大、外形丑陋、浑身好像包裹着金属石板的奇怪生物走了出来，它的眼睛闪烁着的蓝光。</p><p>我惊恐地向后退了两步，“你是？”</p><p>“<em>�</em>* � ”</p><p>“我听不懂” 难道碰到了外星人？</p><p>“锟斤拷打锟锟” 怪物检索着语言，“呵呵 小虫虫，又和小虫虫见面了”</p><hr><p>“你是？” 我脑中有一百万个问题，但现在只能吐出这两个字。</p><p>“小虫虫，TL;DR ，我是迩迓，从隔壁星系团过来的，路上遇到点状况，跃迁机出了毛病…”</p><p>“隔壁星系团？跃迁机？” 我满脸疑惑，只听懂他似乎叫二牙。</p><p>“害 小虫虫，就你们隔壁不远。我需要几位维修工程师修理我的跃迁机，也就是…交通工具，飞船。”</p><p>“本来是不需要你们小虫虫的，但是我的同伴们都牺牲了，只能…” 二牙丑陋的面孔上划过一丝悲伤，看向了我。</p><p>“我…我是一个 HR ，不会维修飞船。” 我尽量让自己的声音听起来镇定。</p><p>“HR 不是会找人吗，赶紧找人！立刻马上！” 二牙把巨头猛一凑近，一股气流撞到我身上，我连连退了几米远。</p><p>“好好好！我…我马上找！马上找！” 我扶着墙一阵头晕目眩，盘算着去哪找会维修飞船的人。</p><p>“还在等什么！耽误我的大事，小虫虫会付出代价！” 二牙看我还呆在原地，不耐烦地咧着大嘴，又把头猛地一凑。</p><p>呯！办公室的桌子椅子连带着桌上的东西都飞了起来，然后重重砸在墙上。</p><hr><p>我赶紧爬起来打开电脑，在招聘网站上搜索“维修工”，但几乎都是些水管、空调维修，一无所获。</p><p>突然，我瞥见之前群里有人分享的一个职位描述自动生成工具：<strong>职生机</strong> </p><p><a href="https://jobot.gegegugu.com/">职生机 Jobot - 职位描述生成机器, 专注智能招聘jobot.gegegugu.com<img src="https://pic2.zhimg.com/v2-b6e52857d3b63cef1db99ccb5fec3ebd_180x120.jpg" alt="img"></a></p><p>职生机职生机，能不能有有一丝生机只能靠你了！</p><p>我飞快输入“<strong>急招飞船修理人员，帮助外星人二牙回家</strong>”，点击生成按钮，</p><iframe width="560" height="315" src="https://vdn3.vzuu.com/HD/d64856b0-199d-11ef-8270-be32fcfb9588-v8_f2_t1_1E4tL4rN.mp4?disable_local_cache=1&bu=1513c7c2&c=avc.8.0&f=mp4&expiration=1716553438&auth_key=1716553438-0-0-b2b45152c92d0a79313bfb1c2c869095&v=tx&pu=4e83193b&pp=ChMxNDAxNjIzODY1NzM5NTc5MzkyGGMiC2ZlZWRfY2hvaWNlMhMxMzY5MDA1NjA4NTk5OTA0MjU3PXu830Q%3D&pf=Web&pt=zhihu" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>哗啦啦～职位描述内容几秒种就生成出来了！嘿嘿嘿，这下应该能侥幸捡回一条命了。</p><hr><p>正欣喜时，我一回头看到站在身后的二牙。</p><p>”这就是你们小虫虫的智能吗？“ 二牙显得有些惊讶。</p><p>”是的，这是我们最新的智能工具，能大大提高招聘和工作效率“</p><p>”呵呵，小虫虫“ 二牙仰头笑了起来，好像从地狱深渊传来了几丝干笑”，”你们的智能，就是用在这种琐碎的事情上吗？“</p><p>我注视着他，无言以对。</p><p>“几千年前我来过这里，那时候你们这些小虫虫喜欢盖房子，几千年过去了，小虫虫的智能还是这么低级” 二牙不屑地看着我。</p><p>“几千年前…你来过这里？什么盖房子？” 我更加疑惑了。</p><p>“用石头盖房子，后来我看的着急，只好帮他们也盖了几个小房子，顺便，把他们也盖在里面了…”。</p><p>二牙说话间随手一指，空中出现一团光芒，接着几座金字塔的模型显现了出来。</p><p>“金字塔？金字塔是你建的？？？”我震惊地看向他。</p><p>“没错。” 二牙似乎在描述一件微不足道的事情。</p><p>叮～叮～叮～ 是求职者们发的招呼提醒，我赶紧回到电脑前查看。</p><hr><p>几天后，我再次看到了二牙，他的身形看起来比上次更加高大，更有力量。</p><p>“谢谢你们，小虫虫。” 他的语气缓和了些。</p><p>“不客气，我们还会再见面吗？“</p><p>”也许吧 哈哈，几千年前你们也问过我同样的问题…“</p><p>“是吗？” 我脑海里想象金字塔下的苦工们面对这个可怕的怪物，问出这个问题。</p><p>“哈哈哈哈，朝菌不知晦朔，蟪蛄不知春秋，可悲啊…“</p><p>二牙长长地叹息了一声，扭头进入飞船，很快就消失在天空中。</p><hr><p>飞船巨大的轰鸣声和刺眼的白光，让我醒了过来。</p><p>我抬头看到自己还在工位上，办公室一切如常，同事们都刚午睡醒来，伸着懒腰。</p><p>只是电脑屏幕上，还打开着 <strong>职生机</strong>的网页 <a href="https://jobot.gegegugu.com/">jobot.gegegugu.com</a></p><p>上面清楚地写着：<strong>急招飞船修理人员，帮助外星人二牙回家</strong></p><p><img src="https://img.amonxu.com/file/c342a2b7914ef4ac6fc3d.png" alt="职生机-帮助HR节省时间帮助外星人回家"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我是一个 HR，碰到疑似“外星人 ”，居然让我帮他修理星际飞船？！&lt;/p&gt;
&lt;p&gt;本来我想拒绝，但是他大手一挥，我飞出了三米远。更没想到的是，四千年前的金字塔居然也和他有关！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.amonxu.com/file/cfb4</summary>
      
    
    
    
    
    <category term="科幻" scheme="https://amonxu.com/tags/%E7%A7%91%E5%B9%BB/"/>
    
    <category term="Jobot" scheme="https://amonxu.com/tags/Jobot/"/>
    
    <category term="职生机" scheme="https://amonxu.com/tags/%E8%81%8C%E7%94%9F%E6%9C%BA/"/>
    
    <category term="短篇小说" scheme="https://amonxu.com/tags/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>如何在 GitHub README 中插入视频？原来这么简单</title>
    <link href="https://amonxu.com/2024/05/23/zh-CN/2024-05-23-How-to-embed-a-video-into-GitHub-README/"/>
    <id>https://amonxu.com/2024/05/23/zh-CN/2024-05-23-How-to-embed-a-video-into-GitHub-README/</id>
    <published>2024-05-23T10:23:22.000Z</published>
    <updated>2024-05-23T11:21:26.712Z</updated>
    
    <content type="html"><![CDATA[<p>当我们发布一款产品时，通常会制作一个演示视频来展示我们产品的功能和特性。如今，很多 GitHub 仓库也是如此。<br>但是，如何在GitHub README 中插入视频呢？</p><p>在此之前，我们尝试将视频文件添加到代码仓库中，但由于平台的限制，视频文件显示为URL。我们还尝试使用 Markdown 或 HTML 来嵌入视频，但根本不起作用。</p><p>好消息是，如今将本地视频插入到 GitHub README中 非常简单！</p><p>只需如下几步即可：</p><h1 id="1-在-GitHub-在线仓库中编辑-README-文件"><a href="#1-在-GitHub-在线仓库中编辑-README-文件" class="headerlink" title="1. 在 GitHub 在线仓库中编辑 README 文件"></a>1. 在 GitHub 在线仓库中编辑 README 文件</h1><p>编辑页面的链接类似： <code>https://github.com/xumeng/ai-careers/edit/master/README.md</code></p><p><img src="https://i0.wp.com/i.sstatic.net/8Cp7qcTK.png" alt="github readme中插入视频"></p><h1 id="2-把本地视频文件拖到编辑区域内"><a href="#2-把本地视频文件拖到编辑区域内" class="headerlink" title="2. 把本地视频文件拖到编辑区域内"></a>2. 把本地视频文件拖到编辑区域内</h1><p>GitHub 会自动上传视频文件，然后展示一个资源文件的链接地址，类似： <code>https://github.com/xumeng/ai-careers/assets/2187660/7362e4b8-6318-4cfc-af63-b8921455e434</code></p><p><img src="https://i0.wp.com/i.sstatic.net/EDbTWGOZ.png" alt="把视频插入到github readme中"></p><h1 id="3-预览检查效果，然后提交文件更新，搞定！"><a href="#3-预览检查效果，然后提交文件更新，搞定！" class="headerlink" title="3. 预览检查效果，然后提交文件更新，搞定！"></a>3. 预览检查效果，然后提交文件更新，搞定！</h1><p><img src="https://i0.wp.com/i.sstatic.net/0l7Y2vCY.png" alt="职生机jobotai自动生成招聘职位描述"></p><p>GitHub README 示例: <a href="https://github.com/xumeng/ai-careers">https://github.com/xumeng/ai-careers</a></p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://stackoverflow.com/a/78521560/3090339">https://stackoverflow.com/a/78521560/3090339</a></p><p><a href="https://amonxu.medium.com/how-to-embed-a-video-into-github-readme-so-easy-c298ca92d537">https://amonxu.medium.com/how-to-embed-a-video-into-github-readme-so-easy-c298ca92d537</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当我们发布一款产品时，通常会制作一个演示视频来展示我们产品的功能和特性。如今，很多 GitHub 仓库也是如此。&lt;br&gt;但是，如何在GitHub README 中插入视频呢？&lt;/p&gt;
&lt;p&gt;在此之前，我们尝试将视频文件添加到代码仓库中，但由于平台的限制，视频文件显示为URL</summary>
      
    
    
    
    
    <category term="GitHub" scheme="https://amonxu.com/tags/GitHub/"/>
    
    <category term="Documents" scheme="https://amonxu.com/tags/Documents/"/>
    
  </entry>
  
  <entry>
    <title>How to embed a video into GitHub-README? So easy!</title>
    <link href="https://amonxu.com/2024/05/23/en/2024-05-23-How-to-embed-a-video-into-GitHub-README/"/>
    <id>https://amonxu.com/2024/05/23/en/2024-05-23-How-to-embed-a-video-into-GitHub-README/</id>
    <published>2024-05-23T10:03:22.000Z</published>
    <updated>2024-05-23T11:21:23.202Z</updated>
    
    <content type="html"><![CDATA[<p>When we launch a product, we usually make a video to show our product’s functions and features. We also do this for our GitHub repository now.</p><p>However, how can we embed a video into a GitHub README?</p><p>In the past, we tried to add a video file to the repository, but the video file showed as a URL given the limitations of the platform. We also tried using markdown or HTML to embed a video, but it did not work at all.</p><p>Good news: <strong>Embedding a local video into a GitHub README is very easy now!</strong></p><p>Just follow these steps: </p><h1 id="1-Edit-the-README-file-on-the-GitHub-online-repository"><a href="#1-Edit-the-README-file-on-the-GitHub-online-repository" class="headerlink" title="1. Edit the README file on the GitHub online repository"></a>1. Edit the README file on the GitHub online repository</h1><p>The edit page url likes <code>https://github.com/xumeng/ai-careers/edit/master/README.md</code></p><p><img src="https://i0.wp.com/i.sstatic.net/8Cp7qcTK.png" alt="embed a video into github readme file"></p><h1 id="2-Drag-the-local-video-file-to-the-edit-panel"><a href="#2-Drag-the-local-video-file-to-the-edit-panel" class="headerlink" title="2. Drag the local video file to the edit panel"></a>2. Drag the local video file to the edit panel</h1><p>GitHub will uploading the file automatically, then it will showing a video asset url likes <code>https://github.com/xumeng/ai-careers/assets/2187660/7362e4b8-6318-4cfc-af63-b8921455e434</code></p><p><img src="https://i0.wp.com/i.sstatic.net/EDbTWGOZ.png" alt="drag the video file into the github readme file"></p><h1 id="3-Preview-and-commit-the-changes-We’re-done"><a href="#3-Preview-and-commit-the-changes-We’re-done" class="headerlink" title="3. Preview and commit the changes, We’re done!"></a>3. Preview and commit the changes, We’re done!</h1><p><img src="https://i0.wp.com/i.sstatic.net/0l7Y2vCY.png" alt="generates job description by 职生机jobotai"></p><p>GitHub README Demo: <a href="https://github.com/xumeng/ai-careers">https://github.com/xumeng/ai-careers</a></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://stackoverflow.com/a/78521560/3090339">https://stackoverflow.com/a/78521560/3090339</a></p><p><a href="https://amonxu.medium.com/how-to-embed-a-video-into-github-readme-so-easy-c298ca92d537">https://amonxu.medium.com/how-to-embed-a-video-into-github-readme-so-easy-c298ca92d537</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;When we launch a product, we usually make a video to show our product’s functions and features. We also do this for our GitHub repository</summary>
      
    
    
    
    
    <category term="GitHub" scheme="https://amonxu.com/tags/GitHub/"/>
    
    <category term="Documents" scheme="https://amonxu.com/tags/Documents/"/>
    
  </entry>
  
  <entry>
    <title>十年磨一剑，今朝更锃亮：把 Hexo blog + hexo-theme-next 博客升级到最新版本</title>
    <link href="https://amonxu.com/2024/05/14/zh-CN/2024-05-14-Hexo-Blog-Upgrade/"/>
    <id>https://amonxu.com/2024/05/14/zh-CN/2024-05-14-Hexo-Blog-Upgrade/</id>
    <published>2024-05-14T15:00:55.000Z</published>
    <updated>2024-05-16T07:54:50.815Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1444703686981-a3abbc4d4fe3?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA==" alt="hexo blog upgrade"></p><center><font size=8>磨剑</font></center><p>现在很有意思，凡事讲究个敏捷、迭代、快。稍微一个不留神，就会发现自己被时代远远甩在后面。</p><p>我的 Blog 托管在 GitHub Pages + Hexo，有段时间没更新 Blog 程序了。这两天心血来潮想试下更新，发现程序落后好几个大版本（当前使用 3.x，最新版本 7.x）。</p><p>今天头铁，备份 Blog 后果断上手开干，先报下总结：</p><p><strong>好消息：升级过程意外的顺利</strong></p><p><strong>坏消息：升级后没感觉到明显变化</strong> （可能是我期望太高了🤔️）</p><blockquote><p>升级后的程序版本信息：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ hexo version</span><br><span class="line">INFO  Validating config</span><br><span class="line">hexo: 7.2.0</span><br><span class="line">hexo-cli: 4.3.2</span><br><span class="line">os: darwin 22.4.0 13.3.1</span><br></pre></td></tr></table></figure><hr><center><font size=10>十年 </font></center><p>Blog 最早大概是 2011、2012 年大学期间随便买了个域名，用 WordPress 搭建。<a href="https://amonxu.com/2012/05/21/zh-CN/2012-05-21-hello-world/">https://amonxu.com/2012/05/21/zh-CN/2012-05-21-hello-world/</a></p><p>2013 年接触了 GitHub Pages，觉得 WordPress 实在太不 Geek 了，马上把 Blog 迁移到 GitHub Pages + Jekyll。 <a href="https://amonxu.com/2013/04/18/zh-CN/2013-04-18-wordpress-to-github/">https://amonxu.com/2013/04/18/zh-CN/2013-04-18-wordpress-to-github/</a></p><p>2015 年时，看到 Hexo 的几个主题很有意思，瞬间又感觉 Jekyll 不够酷了，用 Hexo + Node.js 替代了 Jekyll + Ruby。<a href="https://amonxu.com/2013/05/23/zh-CN/2013-05-22-hello--my-blog/">https://amonxu.com/2013/05/23/zh-CN/2013-05-22-hello--my-blog/</a> 。又换了现在这个域名 <a href="https://amonxu.com/">https://amonxu.com</a> </p><p>后面除了更新文章，换过几个主题，暂时没再继续折腾 Blog，直到今天。</p><p>折腾时看到很多程序停止维护，更新时间动不动就是 8, 9 years ago，感叹光阴易逝。</p><blockquote><p>使用过的的Hexo主题列表</p></blockquote><p><img src="https://img.amonxu.com/file/ba0e37a376c9077f946aa.png" alt="amonxu.com hexo theme list"></p><blockquote><p>GitHub Pages 部署记录</p></blockquote><p><img src="https://img.amonxu.com/file/31f1397d4490036514137.png" alt="amonxu.com github pages deployments history"></p><p>升级参考资料：</p><p><a href="https://www.imczw.com/post/tech/hexo5-next8-updated.html">https://www.imczw.com/post/tech/hexo5-next8-updated.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1444703686981-a3abbc4d4fe3?q=80&amp;w=2940&amp;auto=format&amp;fit=crop&amp;ixlib=rb-4.0.3&amp;ixid=M3wxMjA3</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://amonxu.com/tags/Hexo/"/>
    
    <category term="Blog" scheme="https://amonxu.com/tags/Blog/"/>
    
    <category term="2024" scheme="https://amonxu.com/tags/2024/"/>
    
    <category term="next" scheme="https://amonxu.com/tags/next/"/>
    
    <category term="hexo-theme-next" scheme="https://amonxu.com/tags/hexo-theme-next/"/>
    
    <category term="upgrade" scheme="https://amonxu.com/tags/upgrade/"/>
    
  </entry>
  
  <entry>
    <title>Simply way to support multiple languages i18n in Next.js 14 (Based on App Router)</title>
    <link href="https://amonxu.com/2024/04/10/en/2024-04-10-Next-i18n-Best-practices-based-app-router/"/>
    <id>https://amonxu.com/2024/04/10/en/2024-04-10-Next-i18n-Best-practices-based-app-router/</id>
    <published>2024-04-10T03:03:22.000Z</published>
    <updated>2024-04-28T03:43:01.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction:"></a>Introduction:</h2><p>This post introduces the implementation of i18n internationalization multi-language feature in Next.js 14 (based on App Router), and takes into consideration actual scenarios to optimize and perfect the feature step-by-step. By reading this post, you will immediately get how to implement i18n in Next.js.</p><p><img src="https://images.unsplash.com/photo-1502945015378-0e284ca1a5be?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA==" alt="hero"></p><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>In an era where the Internet world is becoming increasingly flattening, the importance of multi-language products is growing. Fortunately, Next.js allows us to quickly support multi-language with simple configurations and code. However, when we search for how Next.js supports multi-languages on the Internet, we might find a variety of implementations, jumbled information, and excessively clever solutions. Then we become confused and start to question: What’s the issue here?</p><p>Today, let’s implement multi-language from 0 to 1 in Next.js and unravel the mystery of multi-language.</p><p>We can refer to the i18n introduction in the Next.js official documentation here: <a href="https://nextjs.org/docs/app/building-your-application/routing/internationalization">https://nextjs.org/docs/app/building-your-application/routing/internationalization</a>, which is quite clear and detailed. This article will be based on this documentation.</p><p>Before we begin, let’s take a look at the final running effect: <a href="https://next-i18n-demo-two.vercel.app/">https://next-i18n-demo-two.vercel.app/</a></p><h2 id="Ready-to-work"><a href="#Ready-to-work" class="headerlink" title="Ready to work"></a>Ready to work</h2><p>First, We create a Next.js app,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app@latest</span><br></pre></td></tr></table></figure><p>Plese select <code>App Router</code>, I am using  <code>TypeScript</code> here.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">❯ npx create-next-app@latest</span><br><span class="line">✔ What is your project named? … `next-i18n-demo`</span><br><span class="line">✔ Would you like to use TypeScript? … No / `Yes`</span><br><span class="line">✔ Would you like to use ESLint? … No / `Yes`</span><br><span class="line">✔ Would you like to use Tailwind CSS? … No / `Yes</span><br><span class="line">✔ Would you like to use `src/` directory? … No / `Yes`</span><br><span class="line">✔ Would you like to use App Router? (recommended) … No / `Yes`</span><br><span class="line">✔ Would you like to customize the default import <span class="built_in">alias</span> (@/*)? … `No` / Yes</span><br></pre></td></tr></table></figure><p>Run locally,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>Open <a href="http://localhost:3000/">http://localhost:3000</a> and you will see that it is running okay.</p><h2 id="Internationalization-introduction"><a href="#Internationalization-introduction" class="headerlink" title="Internationalization introduction"></a>Internationalization introduction</h2><p>Before we start it, let’s briefly introduce about internationalization. <strong>internationalization</strong>, aka <strong>i18n</strong>, this means supporting multiple languages, cultures, and customs in products, mainly including language, time, currency symbols, etc. This article will focus only on the language part. </p><p>In terms of internationalization, a common approach is for a website to default to a certain language’s official site (usually English), and to support the selection of language or region, allowing for a switch to different language versions of the site.</p><p>Specifically, some websites use a language abbreviation as a prefix, such as <code>en.wikipedia.org</code>, <code>zh.wikipedia.org</code>; some use it as a path suffix, such as <code>aws.amazon.com/cn</code>, <code>aws.amazon.com/jp</code>, and others distinguish based on the country or region domain name, such as <code>apple.cn</code>, <code>apple.jp</code>. </p><p>Among these, <code>en, zh, cn, jp</code>, etc., are language codes, which can vary slightly in different versions. You can refer to the reference materials at the end of the article for specifics. </p><p>In this article’s particular case, the <strong>ISO_3166</strong> codes <strong><code>en</code></strong> and <strong><code>zh</code></strong> will be used to represent English and Chinese respectively.</p><h2 id="Begin-to-configure-Multi-Languages"><a href="#Begin-to-configure-Multi-Languages" class="headerlink" title="Begin to configure Multi-Languages"></a>Begin to configure Multi-Languages</h2><p>The original file structure of the project was:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">│   ├── next.svg</span><br><span class="line">│   └── vercel.svg</span><br><span class="line">├── src</span><br><span class="line">│   └── app</span><br><span class="line">│       ├── favicon.ico</span><br><span class="line">│       ├── globals.css</span><br><span class="line">│       ├── layout.tsx</span><br><span class="line">│       └── page.tsx</span><br><span class="line">├── tailwind.config.ts</span><br><span class="line">└── tsconfig.json</span><br></pre></td></tr></table></figure><p>We create a new folder named <code>[lang]</code> in the <code>app</code> directory, then move <code>laytout.tsx</code> and <code>page.tsx</code> from the <code>app</code> directory to <code>[locales]</code>.</p><p>The file structure after moving is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── package.json</span><br><span class="line">├── postcss.config.mjs</span><br><span class="line">├── public</span><br><span class="line">│   ├── next.svg</span><br><span class="line">│   └── vercel.svg</span><br><span class="line">├── src</span><br><span class="line">│   └── app</span><br><span class="line">│       ├── [lang]</span><br><span class="line">│       │   ├── layout.tsx</span><br><span class="line">│       │   └── page.tsx</span><br><span class="line">│       ├── favicon.ico</span><br><span class="line">│       └── globals.css</span><br><span class="line">├── tailwind.config.ts</span><br><span class="line">└── tsconfig.json</span><br></pre></td></tr></table></figure><blockquote><p>Tips: </p><p>Please modify the reference position of globals.css in layout.tsx.</p></blockquote><p>Next, we define json resource files for different languages, which you can put in your preferred file directory. I put it in <code>public/dictionaries</code>. The file format is as follows:</p><p><strong>en.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Next.js i18n Demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;How to implement i18n with Next.js (based on App Router)&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;home&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello, Next.js i18n&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a demo of Next.js i18n&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>zh.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Next.js i18n 示例&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;搞懂 Next.js 实现 i18n 国际化多语言(基于App Router)&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;home&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好, Next.js i18n&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这是一个 Next.js i18n 示例&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Then, we create a file to load the multi-language resource files and get the corresponding language text.</p><p>Add <code>dictionaries.js</code> in the <code>app/[lang]</code> directory. Make sure the file directory and file name are correct and match.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;server-only&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> dictionaries = &#123;</span><br><span class="line">  <span class="attr">en</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./dictionaries/en.json&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> <span class="variable language_">module</span>.<span class="property">default</span>),</span><br><span class="line">  <span class="attr">zh</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./dictionaries/zh.json&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> <span class="variable language_">module</span>.<span class="property">default</span>),</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getDictionary</span> = <span class="keyword">async</span> (<span class="params">locale</span>) =&gt; dictionaries[locale]()</span><br></pre></td></tr></table></figure><h2 id="Using-Multi-Languages"><a href="#Using-Multi-Languages" class="headerlink" title="Using Multi-Languages"></a>Using Multi-Languages</h2><p>We use the multi-language feature on the <code>pages.tsx</code> page.</p><p>First, add the <code>lang</code> parameter for the function, add  <code>async</code>  for the function,</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params">&#123; params: &#123; lang &#125; &#125;: &#123; params: &#123; lang: <span class="built_in">string</span> &#125; &#125;</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use it on the page, add the multi-language fuction call,</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> t = <span class="keyword">await</span> <span class="title function_">getDictionary</span>(lang);</span><br></pre></td></tr></table></figure><p>For convenience, I clean up the default code on <code>page.tsx</code> and only retain the text display.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;main className=<span class="string">&quot;flex min-h-screen flex-col items-center justify-between p-24&quot;</span>&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;fixed left-0 top-0 flex w-full justify-center border-b border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:w-auto  lg:rounded-xl lg:border lg:bg-gray-200 lg:p-4 lg:dark:bg-zinc-800/30&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           &#123;t.home.title&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      &#123;t.<span class="property">home</span>.<span class="property">desc</span>&#125;</span><br><span class="line">&lt;/main&gt;</span><br></pre></td></tr></table></figure><p>Restart the program or wait for the program to hot update successfully, open different language pages <a href="http://localhost:3000/en">http://localhost:3000/en</a> <a href="http://localhost:3000/zh">http://localhost:3000/zh</a> to check the effect.</p><h2 id="Setting-the-Default-Language"><a href="#Setting-the-Default-Language" class="headerlink" title="Setting the Default Language"></a>Setting the Default Language</h2><p>It looks pretty good, but careful friends will find that opening <a href="http://localhost:3000/">http://localhost:3000</a> will result in a 404 error. To solve this problem, we need to set a default language when no language is selected.</p><p>For this, we can create a <code>middleware.ts</code> in the <code>src</code> directory, and then copy the code from the documentation.</p><p>The core logic is simple:</p><p><strong>Check whether there is a certain language identifier in URL’s <code>pathname</code>. If so, return directly. Otherwise, get the appropriate language and redirect the URL to <code>/$&#123;locale&#125;$&#123;pathname&#125;</code></strong></p><p>The focus is on the <code>getLocale</code> function. We need to specify the suitable language. For now, let’s deal with this simply: use the default <code>defaultLocale = &quot;en&quot;</code> .</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextRequest</span>, <span class="title class_">NextResponse</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next/server&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> locales = [<span class="string">&quot;en&quot;</span>, <span class="string">&quot;zh&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> defaultLocale = <span class="string">&quot;en&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the preferred locale, similar to the above or using a library</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLocale</span>(<span class="params">request: NextRequest</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> defaultLocale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">middleware</span>(<span class="params">request: NextRequest</span>) &#123;</span><br><span class="line">  <span class="comment">// Check if there is any supported locale in the pathname</span></span><br><span class="line">  <span class="keyword">const</span> &#123; pathname &#125; = request.<span class="property">nextUrl</span>;</span><br><span class="line">  <span class="keyword">const</span> pathnameHasLocale = locales.<span class="title function_">some</span>(</span><br><span class="line">    <span class="function">(<span class="params">locale</span>) =&gt;</span> pathname.<span class="title function_">startsWith</span>(<span class="string">`/<span class="subst">$&#123;locale&#125;</span>/`</span>) || pathname === <span class="string">`/<span class="subst">$&#123;locale&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pathnameHasLocale) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Redirect if there is no locale</span></span><br><span class="line">  <span class="keyword">const</span> locale = <span class="title function_">getLocale</span>(request);</span><br><span class="line">  request.<span class="property">nextUrl</span>.<span class="property">pathname</span> = <span class="string">`/<span class="subst">$&#123;locale&#125;</span><span class="subst">$&#123;pathname&#125;</span>`</span>;</span><br><span class="line">  <span class="comment">// e.g. incoming request is /products</span></span><br><span class="line">  <span class="comment">// The new URL is now /en-US/products</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">redirect</span>(request.<span class="property">nextUrl</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">matcher</span>: [</span><br><span class="line">    <span class="comment">// Skip all internal paths (_next)</span></span><br><span class="line">    <span class="string">&quot;/((?!_next).*)&quot;</span>,</span><br><span class="line">    <span class="comment">// Optional: only run on root (/) URL</span></span><br><span class="line">    <span class="comment">// &#x27;/&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>After the program updates, we open <a href="http://localhost:3000/">http://localhost:3000/</a> and see that it will automatically redirect to the default language page.</p><h2 id="Optimization-of-Getting-the-Default-Language"><a href="#Optimization-of-Getting-the-Default-Language" class="headerlink" title="Optimization of Getting the Default Language"></a>Optimization of Getting the Default Language</h2><p>In the previous step, while get the default language, we treated it simply as <code>defaultLocale = &quot;en&quot;</code>. A more graceful way is: <strong>Set the default language based on the user’s system or browser language.</strong></p><p>We can achieve this by getting the <code>Accept-Language</code> field from the browser’s HTTP headers. The data format is approximately as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">English:</span><br><span class="line">accept-language: en-US,en;q=0.5</span><br><span class="line">Chinese:</span><br><span class="line">accept-language: zh-CN,zh-Hans;q=0.9</span><br></pre></td></tr></table></figure><p>We update <code>middleware</code> as follows:</p><ol><li><strong>Get the <code>Accept-Language</code> from the HTTP headers. If it’s empty, then return the default language.</strong></li><li><strong>Parse the language list in <code>Accept-Language</code> and match to get the corresponding language based on the configured language list. (If there is no match, return the default language)</strong></li></ol><p>Install dependencies <code>@formatjs/intl-localematcher</code>, <code>negotiator</code>, <code>@types/negotiator</code>, and implement the following logic:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getLocale</span>(<span class="params">request: NextRequest</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> acceptLang = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&quot;Accept-Language&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!acceptLang) <span class="keyword">return</span> defaultLocale;</span><br><span class="line">  <span class="keyword">const</span> headers = &#123; <span class="string">&quot;accept-language&quot;</span>: acceptLang &#125;;</span><br><span class="line">  <span class="keyword">const</span> languages = <span class="keyword">new</span> <span class="title class_">Negotiator</span>(&#123; headers &#125;).<span class="title function_">languages</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">match</span>(languages, locales, defaultLocale);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By changing the system language, open <a href="http://localhost:3000/">http://localhost:3000</a> and it will automatically redirect to the page with the same system language. Test successfully.</p><h2 id="Other-Handling-of-Multi-Language"><a href="#Other-Handling-of-Multi-Language" class="headerlink" title="Other Handling of Multi-Language"></a>Other Handling of Multi-Language</h2><h4 id="Storing-the-Language"><a href="#Storing-the-Language" class="headerlink" title="Storing the Language"></a>Storing the Language</h4><p>Going a step further, we can store the user’s web page language in the cookies and use it on the next visit:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get Cookie </span></span><br><span class="line"><span class="keyword">if</span> (request.<span class="property">cookies</span>.<span class="title function_">has</span>(cookieName)) &#123;</span><br><span class="line">  <span class="keyword">return</span> request.<span class="property">cookies</span>.<span class="title function_">get</span>(cookieName)!.<span class="property">value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set Cookie</span></span><br><span class="line">response.<span class="property">cookies</span>.<span class="title function_">set</span>(cookieName, locale);</span><br></pre></td></tr></table></figure><h4 id="Web-Metadata-Page-Title-Descriptions"><a href="#Web-Metadata-Page-Title-Descriptions" class="headerlink" title="Web Metadata(Page Title&#x2F;Descriptions..)"></a>Web Metadata(Page Title&#x2F;Descriptions..)</h4><p>When using i18n in web page metadata, add the following code to <code>page.tsx</code>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">generateMetadata</span>(<span class="params">&#123; params: &#123; lang &#125; &#125; : &#123; params: &#123; lang: <span class="built_in">string</span> &#125; &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> t = <span class="keyword">await</span> <span class="title function_">getDictionary</span>(lang);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">title</span>: t.<span class="property">page</span>.<span class="property">title</span>,</span><br><span class="line">    <span class="attr">description</span>: t.<span class="property">page</span>.<span class="property">desc</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SSG-Static-Generation"><a href="#SSG-Static-Generation" class="headerlink" title="SSG(Static Generation)"></a>SSG(Static Generation)</h4><p>When handling i18n in SSG, the code in <code>layout.tsx</code> is as follows:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">LangParams</span> &#123;</span><br><span class="line">  <span class="attr">lang</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">generateStaticParams</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [&#123; <span class="attr">lang</span>: <span class="string">&quot;en&quot;</span> &#125;, &#123; <span class="attr">lang</span>: <span class="string">&quot;zh&quot;</span> &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">RootLayout</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  children,</span></span><br><span class="line"><span class="params">  params,</span></span><br><span class="line"><span class="params">&#125;: Readonly&lt;&#123;</span></span><br><span class="line"><span class="params">  children: React.ReactNode;</span></span><br><span class="line"><span class="params">  params: LangParams;</span></span><br><span class="line"><span class="params">&#125;&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#123;params.lang&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">body</span> <span class="attr">className</span>=<span class="string">&#123;inter.className&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Language-Switch（Language-Switcher-or-Links）"><a href="#Language-Switch（Language-Switcher-or-Links）" class="headerlink" title="Language Switch（Language Switcher or Links）"></a>Language Switch（Language Switcher or Links）</h4><p>You can add a language swicher (like a drop-down menu) or some links.</p><p>For example,</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;space-x-2&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/en&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/zh&quot;</span>&gt;</span>Chinese<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>Through the learning of the above steps, we initially familiarize and practice using multi-language in Next.js. A journey of thousand miles begins with a single step. The work of i18n is not limited to these, and of course, other areas need improvement which I’d leave to you, the reader.</p><p>Finally, here is the complete code of  <code>middleware.ts</code> :</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Negotiator</span> <span class="keyword">from</span> <span class="string">&quot;negotiator&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; match &#125; <span class="keyword">from</span> <span class="string">&quot;@formatjs/intl-localematcher&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextRequest</span>, <span class="title class_">NextResponse</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next/server&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locales = [<span class="string">&quot;en&quot;</span>, <span class="string">&quot;zh&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> defaultLocale = <span class="string">&quot;zh&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> cookieName = <span class="string">&quot;i18nlang&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the preferred locale, similar to the above or using a library</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLocale</span>(<span class="params">request: NextRequest</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="comment">// Get locale from cookie</span></span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">cookies</span>.<span class="title function_">has</span>(cookieName))</span><br><span class="line">    <span class="keyword">return</span> request.<span class="property">cookies</span>.<span class="title function_">get</span>(cookieName)!.<span class="property">value</span>;</span><br><span class="line">  <span class="comment">// Get accept language from HTTP headers</span></span><br><span class="line">  <span class="keyword">const</span> acceptLang = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&quot;Accept-Language&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!acceptLang) <span class="keyword">return</span> defaultLocale;</span><br><span class="line">  <span class="comment">// Get match locale</span></span><br><span class="line">  <span class="keyword">const</span> headers = &#123; <span class="string">&quot;accept-language&quot;</span>: acceptLang &#125;;</span><br><span class="line">  <span class="keyword">const</span> languages = <span class="keyword">new</span> <span class="title class_">Negotiator</span>(&#123; headers &#125;).<span class="title function_">languages</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">match</span>(languages, locales, defaultLocale);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">middleware</span>(<span class="params">request: NextRequest</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">nextUrl</span>.<span class="property">pathname</span>.<span class="title function_">startsWith</span>(<span class="string">&quot;/_next&quot;</span>)) <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">next</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if there is any supported locale in the pathname</span></span><br><span class="line">  <span class="keyword">const</span> &#123; pathname &#125; = request.<span class="property">nextUrl</span>;</span><br><span class="line">  <span class="keyword">const</span> pathnameHasLocale = locales.<span class="title function_">some</span>(</span><br><span class="line">    <span class="function">(<span class="params">locale</span>) =&gt;</span> pathname.<span class="title function_">startsWith</span>(<span class="string">`/<span class="subst">$&#123;locale&#125;</span>/`</span>) || pathname === <span class="string">`/<span class="subst">$&#123;locale&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pathnameHasLocale) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Redirect if there is no locale</span></span><br><span class="line">  <span class="keyword">const</span> locale = <span class="title function_">getLocale</span>(request);</span><br><span class="line">  request.<span class="property">nextUrl</span>.<span class="property">pathname</span> = <span class="string">`/<span class="subst">$&#123;locale&#125;</span><span class="subst">$&#123;pathname&#125;</span>`</span>;</span><br><span class="line">  <span class="comment">// e.g. incoming request is /products</span></span><br><span class="line">  <span class="comment">// The new URL is now /en-US/products</span></span><br><span class="line">  <span class="keyword">const</span> response = <span class="title class_">NextResponse</span>.<span class="title function_">redirect</span>(request.<span class="property">nextUrl</span>);</span><br><span class="line">  <span class="comment">// Set locale to cookie</span></span><br><span class="line">  response.<span class="property">cookies</span>.<span class="title function_">set</span>(cookieName, locale);</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">matcher</span>: [</span><br><span class="line">    <span class="comment">// Skip all internal paths (_next)</span></span><br><span class="line">    <span class="string">&quot;/((?!_next).*)&quot;</span>,</span><br><span class="line">    <span class="comment">// Optional: only run on root (/) URL</span></span><br><span class="line">    <span class="comment">// &#x27;/&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>You can get the full code from  <a href="https://github.com/xumeng/next-i18n-demo">https://github.com/xumeng/next-i18n-demo</a> .</p><p>The finally running demo: <a href="https://next-i18n-demo-two.vercel.app/">https://next-i18n-demo-two.vercel.app/</a></p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h2><p><a href="https://nextjs.org/docs/app/building-your-application/routing/internationalization">https://nextjs.org/docs/app/building-your-application/routing/internationalization</a></p><p><a href="https://en.wikipedia.org/wiki/ISO_3166">https://en.wikipedia.org/wiki/ISO_3166</a></p><p><a href="https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes">https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes</a></p><p><a href="https://en.wikipedia.org/wiki/IETF_language_tag">https://en.wikipedia.org/wiki/IETF_language_tag</a></p><p><a href="https://www.alchemysoftware.com/livedocs/ezscript/Topics/Catalyst/Language.htm">https://www.alchemysoftware.com/livedocs/ezscript/Topics/Catalyst/Language.htm</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction:&quot;&gt;&lt;/a&gt;Introduction:&lt;/h2&gt;&lt;p&gt;This post introduces the imp</summary>
      
    
    
    
    
    <category term="Next.js" scheme="https://amonxu.com/tags/Next-js/"/>
    
    <category term="React" scheme="https://amonxu.com/tags/React/"/>
    
    <category term="i18n" scheme="https://amonxu.com/tags/i18n/"/>
    
    <category term="internationalization" scheme="https://amonxu.com/tags/internationalization/"/>
    
  </entry>
  
  <entry>
    <title>一篇文章学会 Next.js 实现 i18n 国际化多语言(基于App Router)</title>
    <link href="https://amonxu.com/2024/04/10/zh-CN/2024-04-10-Next-i18n-Best-practices-based-app-router/"/>
    <id>https://amonxu.com/2024/04/10/zh-CN/2024-04-10-Next-i18n-Best-practices-based-app-router/</id>
    <published>2024-04-10T03:03:22.000Z</published>
    <updated>2024-04-25T04:22:36.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章导读："><a href="#文章导读：" class="headerlink" title="文章导读："></a>文章导读：</h2><p>本文介绍了在 Next.js 14 (基于App Router) 中实现 i18n 国际化多语言功能，并考虑在真实的场景中，一步步优化将功能完善。通过阅读完本文，你将立即掌握如何在 Next.js 中实现 i18n。</p><p><img src="https://images.unsplash.com/photo-1502945015378-0e284ca1a5be?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA==" alt="hero"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在互联网世界越来越扁平化的时代，产品的多语言显得越来越重要。幸运的在 Next.js 中通过简单的配置和代码即可快速支持多语言。但是，当我们在互联网上搜索 Next.js 如何支持多语言时，可能会看到各种实现方式、鱼龙混杂和奇技淫巧的方案，于是我们一头雾水，不禁怀疑人生：到底哪里出了问题？</p><p>今天，让我们从 0 到 1 在 Next.js 中实现一个多语言，揭开多语言的神秘面纱。</p><p>我们查看 Next.js 官方文档中的 i18n 介绍， <a href="https://nextjs.org/docs/app/building-your-application/routing/internationalization%EF%BC%8C%E6%AF%94%E8%BE%83%E6%B8%85%E6%99%B0%E8%AF%A6%E7%BB%86%E4%BA%86%EF%BC%8C%E6%9C%AC%E6%96%87%E4%B9%9F%E5%B0%86%E5%9F%BA%E4%BA%8E%E6%AD%A4%E7%AF%87%E6%96%87%E6%A1%A3%E5%88%B6%E4%BD%9C%E3%80%82">https://nextjs.org/docs/app/building-your-application/routing/internationalization，比较清晰详细了，本文也将基于此篇文档制作。</a></p><p>开始之前，先看看最终运行效果：<a href="https://next-i18n-demo-two.vercel.app/">https://next-i18n-demo-two.vercel.app/</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，我们初始化一个 Next.js app，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app@latest</span><br></pre></td></tr></table></figure><p>请注意选择 <code>App Router</code>，此处我使用的是 <code>TypeScript</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">❯ npx create-next-app@latest</span><br><span class="line">✔ What is your project named? … `next-i18n-demo`</span><br><span class="line">✔ Would you like to use TypeScript? … No / `Yes`</span><br><span class="line">✔ Would you like to use ESLint? … No / `Yes`</span><br><span class="line">✔ Would you like to use Tailwind CSS? … No / `Yes</span><br><span class="line">✔ Would you like to use `src/` directory? … No / `Yes`</span><br><span class="line">✔ Would you like to use App Router? (recommended) … No / `Yes`</span><br><span class="line">✔ Would you like to customize the default import <span class="built_in">alias</span> (@/*)? … `No` / Yes</span><br></pre></td></tr></table></figure><p>本地启动，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>打开 <a href="http://localhost:3000/">http://localhost:3000</a> 看到程序运行正常。</p><h2 id="国际化介绍"><a href="#国际化介绍" class="headerlink" title="国际化介绍"></a>国际化介绍</h2><p>在正式开始之前，我们先简单介绍一下国际化，国际化 <strong>internationalization</strong>，简称 <strong>i18n</strong>，也即在产品中支持多国语言文化和环境风俗，主要包括语言&#x2F;时间&#x2F;货币符号等。这篇文章中将只专注于语言部分。</p><p>在国际化的具体呈现上，常见的方式是网站默认进入某个语言的官网（通常是英文），并支持选择语言或地区，进行切换网站的不同语言版本。</p><p>具体实现方式上，有的网站以语言简称为前缀，如 <code>en.wikipedia.org</code>, <code>zh.wikipedia.org</code>；有的网站以语言简称作为路径后缀，如 <code>aws.amazon.com/cn</code>， <code>aws.amazon.com/jp</code>，也有以国家地区域名为区分的，如以前的 <code>apple.cn</code>, <code>apple.jp</code>。</p><p>其中诸如 <code>en, zh, cn, jp</code> ，也即语言编码，在不同版本的语言编码版本中略有不同，具体可参考文章下方参考资料。</p><p>在本文案例中，将以 <strong>ISO_3166</strong> 中的 <strong><code>en</code></strong> 和 <strong><code>zh</code></strong> 编码分别代表英文和中文。</p><h2 id="开始配置多语言"><a href="#开始配置多语言" class="headerlink" title="开始配置多语言"></a>开始配置多语言</h2><p>项目之前的文件结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">│   ├── next.svg</span><br><span class="line">│   └── vercel.svg</span><br><span class="line">├── src</span><br><span class="line">│   └── app</span><br><span class="line">│       ├── favicon.ico</span><br><span class="line">│       ├── globals.css</span><br><span class="line">│       ├── layout.tsx</span><br><span class="line">│       └── page.tsx</span><br><span class="line">├── tailwind.config.ts</span><br><span class="line">└── tsconfig.json</span><br></pre></td></tr></table></figure><p>我们在 <code>app</code> 目录新建一个文件夹 <code>[lang]</code>，然后将 <code>app</code> 目录的 <code>laytout.tsx</code> 和 <code>page.tsx</code> 移入 <code>[locales]</code>中，</p><p>移动后的文件结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── package.json</span><br><span class="line">├── postcss.config.mjs</span><br><span class="line">├── public</span><br><span class="line">│   ├── next.svg</span><br><span class="line">│   └── vercel.svg</span><br><span class="line">├── src</span><br><span class="line">│   └── app</span><br><span class="line">│       ├── [lang]</span><br><span class="line">│       │   ├── layout.tsx</span><br><span class="line">│       │   └── page.tsx</span><br><span class="line">│       ├── favicon.ico</span><br><span class="line">│       └── globals.css</span><br><span class="line">├── tailwind.config.ts</span><br><span class="line">└── tsconfig.json</span><br></pre></td></tr></table></figure><blockquote><p>Tips: </p><p>注意同步修改 layout.tsx 中 globals.css 的引用位置。</p></blockquote><p>接下来，我们定义不同语言的 json 资源文件，你可以放入你习惯的文件目录，我这里放入 <code>public/dictionaries</code>，格式如下：</p><p><strong>en.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Next.js i18n Demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;How to implement i18n with Next.js (based on App Router)&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;home&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello, Next.js i18n&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a demo of Next.js i18n&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>zh.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Next.js i18n 示例&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;搞懂 Next.js 实现 i18n 国际化多语言(基于App Router)&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;home&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好, Next.js i18n&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这是一个 Next.js i18n 示例&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>紧接着，我们创建一个文件，用于加载多语言资源文件并获取相应语言文本。</p><p>在 <code>app/[lang]</code> 目录添加 <code>dictionaries.js</code>，注意检查文件目录及文件名是正确并匹配的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;server-only&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> dictionaries = &#123;</span><br><span class="line">  <span class="attr">en</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./dictionaries/en.json&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> <span class="variable language_">module</span>.<span class="property">default</span>),</span><br><span class="line">  <span class="attr">zh</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./dictionaries/zh.json&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> <span class="variable language_">module</span>.<span class="property">default</span>),</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getDictionary</span> = <span class="keyword">async</span> (<span class="params">locale</span>) =&gt; dictionaries[locale]()</span><br></pre></td></tr></table></figure><h2 id="使用多语言"><a href="#使用多语言" class="headerlink" title="使用多语言"></a>使用多语言</h2><p>我们在 <code>pages.tsx</code> 页面中使用多语言功能。</p><p>首先，为函数增加 <code>lang</code> 参数，注意为函数添加 <code>async</code> 关键字，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params">&#123; params: &#123; lang &#125; &#125;: &#123; params: &#123; lang: <span class="built_in">string</span> &#125; &#125;</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加多语言的调用，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> t = <span class="keyword">await</span> <span class="title function_">getDictionary</span>(lang);</span><br></pre></td></tr></table></figure><p>在页面上使用，为了方便我将 <code>page.tsx</code> 上默认的代码进行清理，只保留文本展示。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;main className=<span class="string">&quot;flex min-h-screen flex-col items-center justify-between p-24&quot;</span>&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;fixed left-0 top-0 flex w-full justify-center border-b border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:w-auto  lg:rounded-xl lg:border lg:bg-gray-200 lg:p-4 lg:dark:bg-zinc-800/30&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           &#123;t.home.title&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      &#123;t.<span class="property">home</span>.<span class="property">desc</span>&#125;</span><br><span class="line">&lt;/main&gt;</span><br></pre></td></tr></table></figure><p>重启程序或等程序热更新成功，分别打开不同语言的页面 <a href="http://localhost:3000/en">http://localhost:3000/en</a>  <a href="http://localhost:3000/zh">http://localhost:3000/zh</a> 即可看到效果。</p><h2 id="设置默认语言"><a href="#设置默认语言" class="headerlink" title="设置默认语言"></a>设置默认语言</h2><p>看起来不错，但是细心的朋友会发现打开  <a href="http://localhost:3000/">http://localhost:3000</a> 会出现 404 error。为了解决这个问题，我们需要在未选择语言时，默认设置一个语言。</p><p>为此，我们可以在 <code>src</code> 目录创建一个 <code>middleware.ts</code> ，然后复制文档中的代码。</p><p>核心逻辑很简单：</p><p><strong>判断 URL 的 <code>pathname</code> 中是否含有某个语言标识，如果有则直接返回，否则在获取合适的语言后，将 URL 重定向为 <code>/$&#123;locale&#125;$&#123;pathname&#125;</code></strong></p><p>重点在 <code>getLocale</code> 函数中，我们需要指定合适的语言。在此处，我们先简单处理：使用默认的 <code>defaultLocale = &quot;en&quot;</code> 。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextRequest</span>, <span class="title class_">NextResponse</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next/server&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> locales = [<span class="string">&quot;en&quot;</span>, <span class="string">&quot;zh&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> defaultLocale = <span class="string">&quot;en&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the preferred locale, similar to the above or using a library</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLocale</span>(<span class="params">request: NextRequest</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> defaultLocale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">middleware</span>(<span class="params">request: NextRequest</span>) &#123;</span><br><span class="line">  <span class="comment">// Check if there is any supported locale in the pathname</span></span><br><span class="line">  <span class="keyword">const</span> &#123; pathname &#125; = request.<span class="property">nextUrl</span>;</span><br><span class="line">  <span class="keyword">const</span> pathnameHasLocale = locales.<span class="title function_">some</span>(</span><br><span class="line">    <span class="function">(<span class="params">locale</span>) =&gt;</span> pathname.<span class="title function_">startsWith</span>(<span class="string">`/<span class="subst">$&#123;locale&#125;</span>/`</span>) || pathname === <span class="string">`/<span class="subst">$&#123;locale&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pathnameHasLocale) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Redirect if there is no locale</span></span><br><span class="line">  <span class="keyword">const</span> locale = <span class="title function_">getLocale</span>(request);</span><br><span class="line">  request.<span class="property">nextUrl</span>.<span class="property">pathname</span> = <span class="string">`/<span class="subst">$&#123;locale&#125;</span><span class="subst">$&#123;pathname&#125;</span>`</span>;</span><br><span class="line">  <span class="comment">// e.g. incoming request is /products</span></span><br><span class="line">  <span class="comment">// The new URL is now /en-US/products</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">redirect</span>(request.<span class="property">nextUrl</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">matcher</span>: [</span><br><span class="line">    <span class="comment">// Skip all internal paths (_next)</span></span><br><span class="line">    <span class="string">&quot;/((?!_next).*)&quot;</span>,</span><br><span class="line">    <span class="comment">// Optional: only run on root (/) URL</span></span><br><span class="line">    <span class="comment">// &#x27;/&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>程序更新后，我们打开 <a href="http://localhost:3000/">http://localhost:3000/</a> 可以看到会自动跳转到设置的默认语言页面。</p><h2 id="获取默认语言的优化"><a href="#获取默认语言的优化" class="headerlink" title="获取默认语言的优化"></a>获取默认语言的优化</h2><p>在上一节获取默认语言时，我们简单处理为 <code>defaultLocale = &quot;en&quot;</code> ，更优雅的方式是：<strong>根据用户的系统或者浏览器的语言来设置默认语言</strong>：</p><p>我们可以通过获取浏览器 HTTP headers 中的  <code>Accept-Language</code> 字段来达到目的。它的数据格式大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">英文时：</span><br><span class="line">accept-language: en-US,en;q=0.5</span><br><span class="line">中文时：</span><br><span class="line">accept-language: zh-CN,zh-Hans;q=0.9</span><br></pre></td></tr></table></figure><p>我们将 <code>middleware</code> 改造如下：</p><ol><li><strong>从 HTTP headers 中获取 <code>Accept-Language</code>，如果为空则返回默认语言</strong></li><li><strong>解析 <code>Accept-Language</code> 中的语言列表，并根据配置的语言列表，匹配获取对应的语言（如果没有则返回默认语言）</strong></li></ol><p>安装依赖 <code>@formatjs/intl-localematcher</code>, <code>negotiator</code>, <code>@types/negotiator</code>，并实现如下逻辑：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getLocale</span>(<span class="params">request: NextRequest</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> acceptLang = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&quot;Accept-Language&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!acceptLang) <span class="keyword">return</span> defaultLocale;</span><br><span class="line">  <span class="keyword">const</span> headers = &#123; <span class="string">&quot;accept-language&quot;</span>: acceptLang &#125;;</span><br><span class="line">  <span class="keyword">const</span> languages = <span class="keyword">new</span> <span class="title class_">Negotiator</span>(&#123; headers &#125;).<span class="title function_">languages</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">match</span>(languages, locales, defaultLocale);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过修改系统的语言，打开 <a href="http://localhost:3000/">http://localhost:3000</a> 会自动跳转到同系统语言一致的页面，测试成功。</p><h2 id="多语言的其它处理"><a href="#多语言的其它处理" class="headerlink" title="多语言的其它处理"></a>多语言的其它处理</h2><h4 id="存储用户网页语言"><a href="#存储用户网页语言" class="headerlink" title="存储用户网页语言"></a>存储用户网页语言</h4><p>更进一步地，我们可以在 Cookie 中存储用户网页中的语言，并在下次访问时使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Cookie </span></span><br><span class="line"><span class="keyword">if</span> (request.<span class="property">cookies</span>.<span class="title function_">has</span>(cookieName)) &#123;</span><br><span class="line">  <span class="keyword">return</span> request.<span class="property">cookies</span>.<span class="title function_">get</span>(cookieName)!.<span class="property">value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 Cookie</span></span><br><span class="line">response.<span class="property">cookies</span>.<span class="title function_">set</span>(cookieName, locale);</span><br></pre></td></tr></table></figure><h4 id="网页标题描述等的多语言处理"><a href="#网页标题描述等的多语言处理" class="headerlink" title="网页标题描述等的多语言处理"></a>网页标题描述等的多语言处理</h4><p>在网页 metadata 中使用多语言时，<code>page.tsx</code>添加如下代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">generateMetadata</span>(<span class="params">&#123; params: &#123; lang &#125; &#125; : &#123; params: &#123; lang: <span class="built_in">string</span> &#125; &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> t = <span class="keyword">await</span> <span class="title function_">getDictionary</span>(lang);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">title</span>: t.<span class="property">page</span>.<span class="property">title</span>,</span><br><span class="line">    <span class="attr">description</span>: t.<span class="property">page</span>.<span class="property">desc</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SSG-的多语言处理"><a href="#SSG-的多语言处理" class="headerlink" title="SSG 的多语言处理"></a>SSG 的多语言处理</h4><p>在处理静态站点（SSG）中使用多语言时，<code>layout.tsx</code>代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">LangParams</span> &#123;</span><br><span class="line">  <span class="attr">lang</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">generateStaticParams</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [&#123; <span class="attr">lang</span>: <span class="string">&quot;en&quot;</span> &#125;, &#123; <span class="attr">lang</span>: <span class="string">&quot;zh&quot;</span> &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">RootLayout</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  children,</span></span><br><span class="line"><span class="params">  params,</span></span><br><span class="line"><span class="params">&#125;: Readonly&lt;&#123;</span></span><br><span class="line"><span class="params">  children: React.ReactNode;</span></span><br><span class="line"><span class="params">  params: LangParams;</span></span><br><span class="line"><span class="params">&#125;&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#123;params.lang&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">body</span> <span class="attr">className</span>=<span class="string">&#123;inter.className&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="切换多语言（语言选择器或链接）"><a href="#切换多语言（语言选择器或链接）" class="headerlink" title="切换多语言（语言选择器或链接）"></a>切换多语言（语言选择器或链接）</h4><p>可根据实际情况添加语言选择器（下拉框）或不同的链接，从而跳转到对应语言的页面。</p><p>例如通过链接实现多语言切换：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;space-x-2&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/en&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/zh&quot;</span>&gt;</span>Chinese<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>通过上述步骤的学习，我们初步熟悉并实践了在 Next.js 中使用多语言。千里之行，始于足下，国际化的工作不止于此，我们当然也还有尚未完善的地方，就留给屏幕前的你吧。</p><p>最后附上 <code>middleware.ts</code> 完整代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Negotiator</span> <span class="keyword">from</span> <span class="string">&quot;negotiator&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; match &#125; <span class="keyword">from</span> <span class="string">&quot;@formatjs/intl-localematcher&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextRequest</span>, <span class="title class_">NextResponse</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next/server&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locales = [<span class="string">&quot;en&quot;</span>, <span class="string">&quot;zh&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> defaultLocale = <span class="string">&quot;zh&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> cookieName = <span class="string">&quot;i18nlang&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the preferred locale, similar to the above or using a library</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLocale</span>(<span class="params">request: NextRequest</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="comment">// Get locale from cookie</span></span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">cookies</span>.<span class="title function_">has</span>(cookieName))</span><br><span class="line">    <span class="keyword">return</span> request.<span class="property">cookies</span>.<span class="title function_">get</span>(cookieName)!.<span class="property">value</span>;</span><br><span class="line">  <span class="comment">// Get accept language from HTTP headers</span></span><br><span class="line">  <span class="keyword">const</span> acceptLang = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&quot;Accept-Language&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!acceptLang) <span class="keyword">return</span> defaultLocale;</span><br><span class="line">  <span class="comment">// Get match locale</span></span><br><span class="line">  <span class="keyword">const</span> headers = &#123; <span class="string">&quot;accept-language&quot;</span>: acceptLang &#125;;</span><br><span class="line">  <span class="keyword">const</span> languages = <span class="keyword">new</span> <span class="title class_">Negotiator</span>(&#123; headers &#125;).<span class="title function_">languages</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">match</span>(languages, locales, defaultLocale);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">middleware</span>(<span class="params">request: NextRequest</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">nextUrl</span>.<span class="property">pathname</span>.<span class="title function_">startsWith</span>(<span class="string">&quot;/_next&quot;</span>)) <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">next</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if there is any supported locale in the pathname</span></span><br><span class="line">  <span class="keyword">const</span> &#123; pathname &#125; = request.<span class="property">nextUrl</span>;</span><br><span class="line">  <span class="keyword">const</span> pathnameHasLocale = locales.<span class="title function_">some</span>(</span><br><span class="line">    <span class="function">(<span class="params">locale</span>) =&gt;</span> pathname.<span class="title function_">startsWith</span>(<span class="string">`/<span class="subst">$&#123;locale&#125;</span>/`</span>) || pathname === <span class="string">`/<span class="subst">$&#123;locale&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pathnameHasLocale) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Redirect if there is no locale</span></span><br><span class="line">  <span class="keyword">const</span> locale = <span class="title function_">getLocale</span>(request);</span><br><span class="line">  request.<span class="property">nextUrl</span>.<span class="property">pathname</span> = <span class="string">`/<span class="subst">$&#123;locale&#125;</span><span class="subst">$&#123;pathname&#125;</span>`</span>;</span><br><span class="line">  <span class="comment">// e.g. incoming request is /products</span></span><br><span class="line">  <span class="comment">// The new URL is now /en-US/products</span></span><br><span class="line">  <span class="keyword">const</span> response = <span class="title class_">NextResponse</span>.<span class="title function_">redirect</span>(request.<span class="property">nextUrl</span>);</span><br><span class="line">  <span class="comment">// Set locale to cookie</span></span><br><span class="line">  response.<span class="property">cookies</span>.<span class="title function_">set</span>(cookieName, locale);</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">matcher</span>: [</span><br><span class="line">    <span class="comment">// Skip all internal paths (_next)</span></span><br><span class="line">    <span class="string">&quot;/((?!_next).*)&quot;</span>,</span><br><span class="line">    <span class="comment">// Optional: only run on root (/) URL</span></span><br><span class="line">    <span class="comment">// &#x27;/&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完整代码可在 <a href="https://github.com/xumeng/next-i18n-demo">https://github.com/xumeng/next-i18n-demo</a> 获取。</p><p>最终运行效果：<a href="https://next-i18n-demo-two.vercel.app/">https://next-i18n-demo-two.vercel.app/</a></p><hr><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://nextjs.org/docs/app/building-your-application/routing/internationalization">https://nextjs.org/docs/app/building-your-application/routing/internationalization</a></p><p><a href="https://en.wikipedia.org/wiki/ISO_3166">https://en.wikipedia.org/wiki/ISO_3166</a></p><p><a href="https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes">https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes</a></p><p><a href="https://en.wikipedia.org/wiki/IETF_language_tag">https://en.wikipedia.org/wiki/IETF_language_tag</a></p><p><a href="https://www.alchemysoftware.com/livedocs/ezscript/Topics/Catalyst/Language.htm">https://www.alchemysoftware.com/livedocs/ezscript/Topics/Catalyst/Language.htm</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文章导读：&quot;&gt;&lt;a href=&quot;#文章导读：&quot; class=&quot;headerlink&quot; title=&quot;文章导读：&quot;&gt;&lt;/a&gt;文章导读：&lt;/h2&gt;&lt;p&gt;本文介绍了在 Next.js 14 (基于App Router) 中实现 i18n 国际化多语言功能，并考虑在真实的</summary>
      
    
    
    
    
    <category term="Next.js" scheme="https://amonxu.com/tags/Next-js/"/>
    
    <category term="React" scheme="https://amonxu.com/tags/React/"/>
    
    <category term="i18n" scheme="https://amonxu.com/tags/i18n/"/>
    
    <category term="internationalization" scheme="https://amonxu.com/tags/internationalization/"/>
    
  </entry>
  
  <entry>
    <title>《游子》</title>
    <link href="https://amonxu.com/2024/02/07/zh-CN/2024-02-07-Go-Home/"/>
    <id>https://amonxu.com/2024/02/07/zh-CN/2024-02-07-Go-Home/</id>
    <published>2024-02-07T00:01:01.000Z</published>
    <updated>2024-03-17T04:21:26.022Z</updated>
    
    <content type="html"><![CDATA[<img src="https://pic3.zhimg.com/v2-74eab3ea6cfe106c1e06a1f9eafe75a2_b.png" width="40%" /><p>拖着行李箱的人们，</p><p>满载着一年的劳累，</p><p>穿过长长的铁道，</p><p>回到母亲怀内，</p><p>妈妈</p><p>我想再睡会</p><blockquote><p>2024.2.7 <a href="https://www.zhihu.com/search?q=%E8%85%8A%E6%9C%88%E4%BA%8C%E5%8D%81%E5%85%AB&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:3389717530%7D">腊月二十八</a> 晨</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://pic3.zhimg.com/v2-74eab3ea6cfe106c1e06a1f9eafe75a2_b.png&quot; width=&quot;40%&quot; /&gt;

&lt;p&gt;拖着行李箱的人们，&lt;/p&gt;
&lt;p&gt;满载着一年的劳累，&lt;/p&gt;
&lt;p&gt;穿过长长的铁道，&lt;/p</summary>
      
    
    
    
    <category term="诗" scheme="https://amonxu.com/categories/%E8%AF%97/"/>
    
    
    <category term="诗" scheme="https://amonxu.com/tags/%E8%AF%97/"/>
    
    <category term="2024" scheme="https://amonxu.com/tags/2024/"/>
    
  </entry>
  
  <entry>
    <title>How to solve error on CentOS &quot;/lib64/libstdc++.so.6 version GLIBCXX_3.4.xx not found&quot;</title>
    <link href="https://amonxu.com/2023/10/11/en/2023-10-11-CentOS-Error-libstdc++.so.6-version-GLIBCXX_3.4.xx-not-found/"/>
    <id>https://amonxu.com/2023/10/11/en/2023-10-11-CentOS-Error-libstdc++.so.6-version-GLIBCXX_3.4.xx-not-found/</id>
    <published>2023-10-11T14:33:55.000Z</published>
    <updated>2024-04-25T03:32:15.448Z</updated>
    
    <content type="html"><![CDATA[<hr><p>My personal server uses <code>CentOS 7.9</code>, and there are often strange errors when deploying some AI applications.<br>For example, recently, an error was reported when deploying an application:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/lib64/libstdc++.so.6: version GLIBCXX_3.4.xx not found</span><br></pre></td></tr></table></figure><p>Online search for solutions, there are different opinions, either reinstall <code>gcc</code>, or recompile and install <code>libstdc++</code>,<code>export LD_LIBRARY_PATH</code> and so on.<br>Several attempts have failed, and there is no way to upgrade the os version. Finally, a suitable solution is found, and it’s worked for me.</p><ol><li>Find and display all packages that provide <code>libstdc++.so.6</code> as a library file through yum</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum provides libstdc++.so.6</span><br></pre></td></tr></table></figure><ol start="2"><li>Download new version <code>libstdc.so</code>.</li></ol><blockquote><p>NOTICE: Since I need version <code>3.4.22+</code>, so I can just update it to <code>3.4.26</code>.  Other versions are the same.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/lib64</span><br><span class="line">sudo wget http://www.vuln.cn/wp-content/uploads/2019/08/libstdc.so_.6.0.26.zip</span><br><span class="line">unzip libstdc.so_.6.0.26.zip</span><br></pre></td></tr></table></figure><ol start="3"><li>Copy <code>libstdc++.so.6.0.26</code> to <code>/usr/lib64</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp libstdc++.so.6.0.26 /usr/lib64</span><br><span class="line">cd /usr/lib64</span><br></pre></td></tr></table></figure><ol start="4"><li>Check the soft link version of <code>libstdc++.so.6</code>,</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l | grep libstdc++</span><br></pre></td></tr></table></figure><p>It may shows like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libstdc++.so.6 -&gt;libstdc++.so.6.0.19</span><br></pre></td></tr></table></figure><ol start="5"><li>Remove &#x2F;usr&#x2F;lib64 original link libstdc++.so.6, you can backup it before remove.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm libstdc++.so.6</span><br></pre></td></tr></table></figure><p>then, relink it. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s libstdc++.so.6.0.26 libstdc++.so.6</span><br></pre></td></tr></table></figure><ol start="6"><li>OK, check the newest link</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings /usr/lib64/libstdc++.so.6 | grep GLIBCXX</span><br></pre></td></tr></table></figure><p>It may shows like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GLIBCXX_3.4</span><br><span class="line">...</span><br><span class="line">GLIBCXX_3.4.25</span><br><span class="line">GLIBCXX_3.4.26</span><br><span class="line">GLIBCXX_DEBUG_MESSAGE_LENGTH</span><br></pre></td></tr></table></figure><p>Well Done!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;My personal server uses &lt;code&gt;CentOS 7.9&lt;/code&gt;, and there are often strange errors when deploying some AI applications.&lt;br&gt;For exam</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://amonxu.com/tags/Linux/"/>
    
    <category term="CentOS" scheme="https://amonxu.com/tags/CentOS/"/>
    
    <category term="gcc" scheme="https://amonxu.com/tags/gcc/"/>
    
    <category term="AI" scheme="https://amonxu.com/tags/AI/"/>
    
    <category term="C++" scheme="https://amonxu.com/tags/C/"/>
    
    <category term="transformer" scheme="https://amonxu.com/tags/transformer/"/>
    
    <category term="PyTorch" scheme="https://amonxu.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>Hexo blog title include special symbols reports error</title>
    <link href="https://amonxu.com/2023/09/18/en/2023-09-03-Hexo-Title-Symbol-Error/"/>
    <id>https://amonxu.com/2023/09/18/en/2023-09-03-Hexo-Title-Symbol-Error/</id>
    <published>2023-09-18T05:42:55.000Z</published>
    <updated>2024-04-25T03:31:58.539Z</updated>
    
    <content type="html"><![CDATA[<hr><p>In my Hexo blog, when I include special symbols inside the title in posts, it reports this error: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR Process failed: _posts/en/XXX.md</span><br><span class="line">YAMLException: incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 1, column 54:</span><br><span class="line">     ...  for Backend System Refactoring\: How to do backend system refac ...</span><br></pre></td></tr></table></figure><p><strong>Solution:</strong><br>Include the title in single quotes, like:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: &#x27;How to read a book&#x27;</span><br><span class="line">lang: en</span><br><span class="line">date: 2023-01-01</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;In my Hexo blog, when I include special symbols inside the title in posts, it reports this error: &lt;/p&gt;
&lt;figure class=&quot;highlight plai</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://amonxu.com/tags/Hexo/"/>
    
    <category term="Blog" scheme="https://amonxu.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Best Practices for Backend System Refactoring: How to do backend system refactoring efficiently and with high quality</title>
    <link href="https://amonxu.com/2023/09/01/en/2023-09-01-Refactoring/"/>
    <id>https://amonxu.com/2023/09/01/en/2023-09-01-Refactoring/</id>
    <published>2023-09-01T14:10:33.000Z</published>
    <updated>2023-10-26T03:33:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1491406213019-05b162a72c20?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60" alt="coverimg"></p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>As the company’s business experiences explosive growth, both the scale of requirements and the user base are rapidly expanding. This presents challenges to the system in terms of the three high (high performance, high concurrency, high availability), scalability, and maintainability. The old system, due to various limitations in its early design (such as the expertise of early participants, the foresight of architectural design, impatience of management, etc.), gradually becomes inadequate to meet current and future demands, exposing various issues. Developers find themselves dragging an old, worn-out car on the highway, which is a daunting task. In simpler terms, the codebase of the old system has become too problematic to fix, leading to a situation where developers either get buried in its issues or abandon the project altogether.</p><p>At this point, a common question arises: should we continue trying to patch the issues, or should we choose to refactor? Patching is simply not feasible, not in this lifetime. Refactoring, on the other hand, requires the courage of a true hero because it’s a complex and time-consuming task. Moreover, it can impact ongoing business development or even bring it to a standstill. Often, product managers and executives are not supportive because they only care about one thing: when will the next feature be ready? Everything else is your development team’s problem.</p><p>If you choose the path of refactoring, you must be prepared to see it through, no matter what. How can you ensure a successful refactoring from the get-go? Based on common practices in internet projects and my personal experience in refactoring projects, here is an outline of the common steps for refactoring systems of various sizes:</p><h3 id="Step-0-Convincing-Stakeholders"><a href="#Step-0-Convincing-Stakeholders" class="headerlink" title="Step 0: Convincing Stakeholders"></a>Step 0: Convincing Stakeholders</h3><p>Refactoring is not just the responsibility of the development team; it’s a collective effort involving the entire project team. Refactoring can improve the system’s performance, availability, and scalability, as well as optimize and streamline business processes to meet new demands. It requires a significant investment of resources and must have the support of stakeholders. Typically, this requires explaining the benefits and drawbacks of refactoring, as well as the critical issues that would arise if refactoring is not done. Once you have their support, the refactoring work can officially begin.</p><p>Participants: Technical Leader</p><h3 id="Step-1-Establish-Clear-Refactoring-Goals"><a href="#Step-1-Establish-Clear-Refactoring-Goals" class="headerlink" title="Step 1: Establish Clear Refactoring Goals"></a>Step 1: Establish Clear Refactoring Goals</h3><p>Refactoring is a long-term endeavor; it’s not something that can be completed in one or two iterations, or even within a few months. It requires a substantial investment of manpower, resources, time, and effort. So, what are our goals in this prolonged battle? Are we aiming to meet the system’s high-performance requirements through a more efficient architecture? Or do we want to enhance code quality through refactoring? Perhaps we aim to introduce new technologies and frameworks to upgrade the entire system or optimize business processes to address previously unmet requirements. Once you have clear goals, you can work purposefully.</p><p>Participants: Technical Leader, Architect</p><h3 id="Step-2-Define-the-Scope-of-Refactoring-and-Make-Predictions"><a href="#Step-2-Define-the-Scope-of-Refactoring-and-Make-Predictions" class="headerlink" title="Step 2: Define the Scope of Refactoring and Make Predictions"></a>Step 2: Define the Scope of Refactoring and Make Predictions</h3><p>Refactoring typically falls into several levels:</p><ul><li>Platform-level refactoring: Refactoring the entire platform, such as Alibaba transitioning from the LAMP stack to the Java platform.</li><li>System-level refactoring: Refactoring specific business systems, such as introducing microservices or SOA architecture to break down monolithic applications.</li><li>Architecture-level refactoring: Improving the existing architecture through adjustments and redesign, addressing architectural shortcomings, like decoupling business logic through layered design or introducing caching for improved concurrency.</li><li>Business-level refactoring: Addressing specific business requirements that cannot be met due to the limitations of the current system, often involving the refactoring of business processes or database structures.</li><li>Module&#x2F;code-level refactoring: The most common form of refactoring, typically involving the use of design patterns, encapsulation, and code optimization to improve code structure and performance.</li></ul><p>Determine the level of refactoring required, the overall scope, and the technology stack for refactoring. Then, conduct a scientific assessment and estimation of the refactoring work. This includes identifying the costs, required resources, and time commitments, as well as assessing whether ongoing business requirements can be accommodated during the refactoring process. Once these predictions are established, you can provide stakeholders with a clear understanding, especially when they ask when new requirements can be delivered.</p><p>Participants: Technical Leader, Architect, Developers</p><h3 id="Step-3-Familiarize-Yourself-with-the-Old-System-and-Document-Business-Processes"><a href="#Step-3-Familiarize-Yourself-with-the-Old-System-and-Document-Business-Processes" class="headerlink" title="Step 3: Familiarize Yourself with the Old System and Document Business Processes"></a>Step 3: Familiarize Yourself with the Old System and Document Business Processes</h3><p>Refactoring is not about abandoning the old system; it’s about continuously working with it. Knowing your enemy is the key to victory. Refactoring not only requires a clear understanding of the new system’s goals and future, but also a deep familiarity with the old system, especially its pitfalls. At this stage, the participants in the refactoring project, especially those who worked on the old system, should document and organize information related to the old system’s business and technical details. This includes collecting documents such as design documents, technical documents, architecture diagrams, UML diagrams, and ER diagrams related to the system.</p><p>The following are common preparation tasks before refactoring the old system:</p><ul><li>Gathering information and documentation related to the old system, including design documents, technical documents, architectural diagrams, UML diagrams, ER diagrams, and other graphical materials.</li><li>Mapping and documenting business lines and processes, outlining projects and business flows, and documenting them.</li><li>Reviewing key code and database designs in the old system.</li></ul><p>Any issues or uncertainties should be addressed promptly through communication with relevant personnel from the business side, ensuring that problems are resolved early in the process.</p><p>Participants: Technical Leader, Architect, Developers</p><h3 id="Step-4-Database-Refactoring"><a href="#Step-4-Database-Refactoring" class="headerlink" title="Step 4: Database Refactoring"></a>Step 4: Database Refactoring</h3><p>If the refactoring involves changes to the database, database refactoring is typically the first step. Many refactoring initiatives are triggered by issues related to the database. During database refactoring, the deficiencies and obstacles in the old system’s database design are addressed. This may involve redesigning tables using normalization or denormalization techniques, considering sharding or partitioning strategies, and more.</p><p>Participants: DBA, Architect</p><h3 id="Step-5-Backend-System-Refactoring"><a href="#Step-5-Backend-System-Refactoring" class="headerlink" title="Step 5: Backend System Refactoring"></a>Step 5: Backend System Refactoring</h3><p>Before starting the backend system refactoring, it’s essential to have design and technical documentation in place, as mentioned earlier. Once these documents are finalized through discussions and planning, the architect can proceed with system architecture design, and backend developers can begin coding. This phase is often the most time-consuming and critical part of the refactoring process. The quality of the backend architecture directly affects the success of the refactoring, the quality of the business code, and the overall refactoring quality.</p><p>Due to the extended timeline of this phase and the fact that its results may not be immediately visible, Agile development methodologies are often used. This allows for iterative development, ensuring effective planning and continuous progress. The advantages of using iterations include:</p><ol><li>Effective planning and quantification of the entire refactoring process.</li><li>Visible achievements at each stage, preventing the team from getting stuck in a long refactoring process.</li><li>The ability to test or observe refactored parts promptly during iterations, allowing continuous learning and improvement.</li></ol><p>During backend system refactoring, it’s essential to have clear, quantifiable goals and standards. For example, defining the QPS (Queries Per Second) supported by various systems and business modules, the expected response times for interfaces, etc. This enables the team to focus on achieving these goals during refactoring.</p><p>Regular code reviews should also be conducted throughout the refactoring process to identify and address issues with the refactoring itself and the quality of the code. This helps prevent the introduction of poor designs or subpar code that could harm the entire system.</p><p>Participants: Technical Leader, Architect, Developers</p><h3 id="Step-6-Data-Migration-and-Verification"><a href="#Step-6-Data-Migration-and-Verification" class="headerlink" title="Step 6: Data Migration and Verification"></a>Step 6: Data Migration and Verification</h3><p>If database refactoring is part of the project, data migration becomes a crucial step. It generally involves two types of migration: full migration and incremental migration. Full migration transfers all data from the old system to the new one in one go, while incremental migration handles data created in the old system after full migration until the old system is retired. These migrations are typically scripted or programmed to avoid manual errors.</p><p>After migration, it’s essential to compare the data between the old and new systems. This comparison can also be automated through scripts or programs to identify discrepancies and perform any necessary adjustments or investigations.</p><p>Participants: DBA, Developers</p><h3 id="Step-7-System-Validation-Integration-and-Testing"><a href="#Step-7-System-Validation-Integration-and-Testing" class="headerlink" title="Step 7: System Validation, Integration, and Testing"></a>Step 7: System Validation, Integration, and Testing</h3><p>As the backend system refactoring progresses, scripts and programs should be developed to validate the business interfaces between the old and new systems. This ensures that issues in the refactoring process are detected promptly, and, if necessary, architectural and database adjustments can be made. Additionally, increasing unit test coverage during refactoring is highly beneficial.</p><p>Once the dependencies between systems and modules are resolved, integration testing can begin. Comprehensive testing, including functional testing, stability testing, performance testing, local testing, and simulating production environments, should be performed. Any issues identified during testing should be addressed, verified, and fixed to meet the standards required for a smooth release.</p><p>Participants: Architect, Developers, Testers</p><h3 id="Step-8-Gradual-Deployment-and-Monitoring"><a href="#Step-8-Gradual-Deployment-and-Monitoring" class="headerlink" title="Step 8: Gradual Deployment and Monitoring"></a>Step 8: Gradual Deployment and Monitoring</h3><p>When the backend system refactoring reaches a certain level of stability, it’s time to initiate gradual deployment. During this phase, only a portion of the traffic is directed to the new system. This allows for real-time tracking and analysis of logs and monitoring alarms. Any issues or anomalies can be addressed promptly. As confidence in the new system’s stability grows, the scope and volume of the deployment can be gradually increased. Continuous monitoring of logs and alarms should be maintained throughout this phase.</p><p>Participants: DevOps Team, Testers, Developers</p><h3 id="Step-9-System-Transition"><a href="#Step-9-System-Transition" class="headerlink" title="Step 9: System Transition"></a>Step 9: System Transition</h3><p>When it comes to transitioning to the new system, it’s crucial to have a well-defined transition plan in place. This plan should include detailed processes, workflows, and contingency plans, including rollback procedures in case unexpected issues arise. This step ensures that the transition is smooth and minimizes disruption to the business.</p><p>Participants: DevOps Team, Testers</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>After completing the above steps, the system has undergone successful refactoring. However, it’s essential to understand that refactoring is a substantial undertaking, and even after the process, the system may not be flawless. Refactoring is not the endpoint but rather a new beginning.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1491406213019-05b162a72c20?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=50</summary>
      
    
    
    
    <category term="Technology" scheme="https://amonxu.com/categories/Technology/"/>
    
    
    <category term="Architecture" scheme="https://amonxu.com/tags/Architecture/"/>
    
    <category term="System Design" scheme="https://amonxu.com/tags/System-Design/"/>
    
    <category term="Refactoring" scheme="https://amonxu.com/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title>《一个地方，人满为患》</title>
    <link href="https://amonxu.com/2023/07/22/zh-CN/2023-07-22-Hospital/"/>
    <id>https://amonxu.com/2023/07/22/zh-CN/2023-07-22-Hospital/</id>
    <published>2023-07-21T17:01:01.000Z</published>
    <updated>2023-09-04T09:48:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>里面，</p><p>取号，<br>排队，<br>叫号，<br>付费。</p><p>一切为了活着。</p><hr><p>外面，</p><p>工作，<br>生活，<br>享乐，<br>受罪。</p><p>活着为了一切。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;里面，&lt;/p&gt;
&lt;p&gt;取号，&lt;br&gt;排队，&lt;br&gt;叫号，&lt;br&gt;付费。&lt;/p&gt;
&lt;p&gt;一切为了活着。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;外面，&lt;/p&gt;
&lt;p&gt;工作，&lt;br&gt;生活，&lt;br&gt;享乐，&lt;br&gt;受罪。&lt;/p&gt;
&lt;p&gt;活着为了一切。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="诗" scheme="https://amonxu.com/categories/%E8%AF%97/"/>
    
    
    <category term="诗" scheme="https://amonxu.com/tags/%E8%AF%97/"/>
    
    <category term="2023" scheme="https://amonxu.com/tags/2023/"/>
    
  </entry>
  
  <entry>
    <title>《我》</title>
    <link href="https://amonxu.com/2023/04/07/zh-CN/2023-04-07-My-King/"/>
    <id>https://amonxu.com/2023/04/07/zh-CN/2023-04-07-My-King/</id>
    <published>2023-04-06T17:01:01.000Z</published>
    <updated>2023-09-04T09:49:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>早高峰的洪流中，<br>我被人群簇拥着，<br>仿佛生命之王。</p><p>我感觉自己，<br>活着。<br>但又感觉，<br>死了。</p><blockquote><p>ChatGPT辅助创作</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;早高峰的洪流中，&lt;br&gt;我被人群簇拥着，&lt;br&gt;仿佛生命之王。&lt;/p&gt;
&lt;p&gt;我感觉自己，&lt;br&gt;活着。&lt;br&gt;但又感觉，&lt;br&gt;死了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ChatGPT辅助创作&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="诗" scheme="https://amonxu.com/categories/%E8%AF%97/"/>
    
    
    <category term="诗" scheme="https://amonxu.com/tags/%E8%AF%97/"/>
    
    <category term="2023" scheme="https://amonxu.com/tags/2023/"/>
    
  </entry>
  
  <entry>
    <title>How to solve error GitHub Permission denied fatal Could not read from remote repository</title>
    <link href="https://amonxu.com/2023/01/01/en/2023-01-01-GitHub-Permission-denied-fatal-Could-not-read-from-remote-repository/"/>
    <id>https://amonxu.com/2023/01/01/en/2023-01-01-GitHub-Permission-denied-fatal-Could-not-read-from-remote-repository/</id>
    <published>2023-01-01T03:23:55.000Z</published>
    <updated>2024-04-25T03:32:06.168Z</updated>
    
    <content type="html"><![CDATA[<hr><p>There are multiple Git libraries are used on my machine, such as GitHub&#x2F;Company Private Git repo, etc., the Git tool mainly uses Terminal and GitKraken, and occasionally strange issues will arise. For example, the following error occurred when deploying the Hexo Blog a few days ago:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><p>The usual solution is to regenerate the SSH Key of GitHub.</p><p>But there’s no issue with my local configuration, I can push code normally in Terminal and GitKraken.</p><p>Guessing that there might be some hitch in the process, I used:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>And saw:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi &#123;username&#125;! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>Then redeployed and pushed, It’s worked!</p><p>Reference:</p><blockquote><p><a href="https://docs.github.com/en/authentication/troubleshooting-ssh/error-permission-denied-publickey">https://docs.github.com/en/authentication/troubleshooting-ssh/error-permission-denied-publickey</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;There are multiple Git libraries are used on my machine, such as GitHub&amp;#x2F;Company Private Git repo, etc., the Git tool mainly use</summary>
      
    
    
    
    
    <category term="Git" scheme="https://amonxu.com/tags/Git/"/>
    
    <category term="GitHub" scheme="https://amonxu.com/tags/GitHub/"/>
    
    <category term="Hexo" scheme="https://amonxu.com/tags/Hexo/"/>
    
    <category term="ssh" scheme="https://amonxu.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>解决错误 GitHub Permission denied fatal Could not read from remote repository</title>
    <link href="https://amonxu.com/2023/01/01/zh-CN/2023-01-01-GitHub-Permission-denied-fatal-Could-not-read-from-remote-repository/"/>
    <id>https://amonxu.com/2023/01/01/zh-CN/2023-01-01-GitHub-Permission-denied-fatal-Could-not-read-from-remote-repository/</id>
    <published>2023-01-01T03:23:55.000Z</published>
    <updated>2024-04-25T03:32:24.635Z</updated>
    
    <content type="html"><![CDATA[<hr><p>机器上使用了多个 Git 库，比如 GitHub&#x2F;公司 Git 库等，Git 工具主要使用 Terminal 和 GitKraken，偶尔会出现奇怪的问题。比如前两天在部署 Hexo Blog 时，遇到以下报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><p>通常的解决方案是重新生成 GitHub 的 SSH Key。</p><p>但是我本地的配置是没问题的，可以在 Terminal 和GitKraken正常提交代码。</p><p>猜想可能是哪个环节不通，于是使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi &#123;username&#125;! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>再重新部署提交，搞定！</p><p>参考：</p><blockquote><p><a href="https://docs.github.com/en/authentication/troubleshooting-ssh/error-permission-denied-publickey">https://docs.github.com/en/authentication/troubleshooting-ssh/error-permission-denied-publickey</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;机器上使用了多个 Git 库，比如 GitHub&amp;#x2F;公司 Git 库等，Git 工具主要使用 Terminal 和 GitKraken，偶尔会出现奇怪的问题。比如前两天在部署 Hexo Blog 时，遇到以下报错：&lt;/p&gt;
&lt;figure class=&quot;h</summary>
      
    
    
    
    
    <category term="Git" scheme="https://amonxu.com/tags/Git/"/>
    
    <category term="GitHub" scheme="https://amonxu.com/tags/GitHub/"/>
    
    <category term="Hexo" scheme="https://amonxu.com/tags/Hexo/"/>
    
    <category term="ssh" scheme="https://amonxu.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>《山 · 其二》</title>
    <link href="https://amonxu.com/2022/12/02/zh-CN/2022-12-02-Mountain/"/>
    <id>https://amonxu.com/2022/12/02/zh-CN/2022-12-02-Mountain/</id>
    <published>2022-12-01T17:01:01.000Z</published>
    <updated>2023-09-04T09:54:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>任务堆积如山，<br>债务堆积如山，<br>茫茫一片看不见。</p><p>我，<br>堆积如山。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;任务堆积如山，&lt;br&gt;债务堆积如山，&lt;br&gt;茫茫一片看不见。&lt;/p&gt;
&lt;p&gt;我，&lt;br&gt;堆积如山。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="诗" scheme="https://amonxu.com/categories/%E8%AF%97/"/>
    
    
    <category term="诗" scheme="https://amonxu.com/tags/%E8%AF%97/"/>
    
    <category term="2022" scheme="https://amonxu.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>《山 · 其一》</title>
    <link href="https://amonxu.com/2022/12/01/zh-CN/2022-12-01-Mountain/"/>
    <id>https://amonxu.com/2022/12/01/zh-CN/2022-12-01-Mountain/</id>
    <published>2022-11-30T17:01:01.000Z</published>
    <updated>2023-09-04T09:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>列车从远方，<br>卸下年轻人，<br>拉走父母妻儿，<br>和中老年。</p><p>他们身前，<br>是扬起的帆，<br>他们身后，<br>是累累的山。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;列车从远方，&lt;br&gt;卸下年轻人，&lt;br&gt;拉走父母妻儿，&lt;br&gt;和中老年。&lt;/p&gt;
&lt;p&gt;他们身前，&lt;br&gt;是扬起的帆，&lt;br&gt;他们身后，&lt;br&gt;是累累的山。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="诗" scheme="https://amonxu.com/categories/%E8%AF%97/"/>
    
    
    <category term="诗" scheme="https://amonxu.com/tags/%E8%AF%97/"/>
    
    <category term="2022" scheme="https://amonxu.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>《地铁》</title>
    <link href="https://amonxu.com/2022/11/30/zh-CN/2022-11-30-Metro-Train/"/>
    <id>https://amonxu.com/2022/11/30/zh-CN/2022-11-30-Metro-Train/</id>
    <published>2022-11-29T17:01:01.000Z</published>
    <updated>2023-09-04T09:54:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>一头野兽，<br>在地下怒吼狂奔，<br>他吞掉情侣夫妻父母儿女，<br>吐出一个个沉默的打工人。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一头野兽，&lt;br&gt;在地下怒吼狂奔，&lt;br&gt;他吞掉情侣夫妻父母儿女，&lt;br&gt;吐出一个个沉默的打工人。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="诗" scheme="https://amonxu.com/categories/%E8%AF%97/"/>
    
    
    <category term="诗" scheme="https://amonxu.com/tags/%E8%AF%97/"/>
    
    <category term="2022" scheme="https://amonxu.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>写于11月27日</title>
    <link href="https://amonxu.com/2022/11/27/zh-CN/2022-11-27-Date/"/>
    <id>https://amonxu.com/2022/11/27/zh-CN/2022-11-27-Date/</id>
    <published>2022-11-27T14:18:01.000Z</published>
    <updated>2023-09-04T09:54:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>8年前的一天，在一家粤菜店吃不是饭点的午饭时，我一边品着大麦茶，一边对着左顾右盼着餐厅不多的客人。</p><p>餐厅播放着无聊的节目，但当我转头看向电子时钟，上面跳动着猩红色的数字：2014年11月27日。</p><p>恍惚间，这年这月这日组成这一串，于我陌生无比，不知是外星数字来了地球，还是我这地球人去了外星。</p><p>2-0-1-4，2014年？我印象中并没有这么个年，要说有的，大概是些刚毕业时上大学，刚高考完读高中，刚升高中读初中，升初中时读小学的那些年。</p><p>1-1-2-7，11月27日？还早呢。我并没有十一长假，也未曾过过中秋，说起端午，粽子也没吃过，五一呢，我倒没什么记忆深刻的事情。</p><p>现在，又是11月27日。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;8年前的一天，在一家粤菜店吃不是饭点的午饭时，我一边品着大麦茶，一边对着左顾右盼着餐厅不多的客人。&lt;/p&gt;
&lt;p&gt;餐厅播放着无聊的节目，但当我转头看向电子时钟，上面跳动着猩红色的数字：2014年11月27日。&lt;/p&gt;
&lt;p&gt;恍惚间，这年这月这日组成这一串，于我陌生无比，不知</summary>
      
    
    
    
    <category term="Note" scheme="https://amonxu.com/categories/Note/"/>
    
    
    <category term="随笔" scheme="https://amonxu.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="2022" scheme="https://amonxu.com/tags/2022/"/>
    
  </entry>
  
  <entry>
    <title>从优雅地查看K8s应用日志聊到日志管理</title>
    <link href="https://amonxu.com/2022/10/12/zh-CN/2022-10-12-K8S-Logs/"/>
    <id>https://amonxu.com/2022/10/12/zh-CN/2022-10-12-K8S-Logs/</id>
    <published>2022-10-12T13:00:01.000Z</published>
    <updated>2023-09-15T09:46:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>曾不知在哪听过一经典名句：程序员的工作有两件事，一是写 Bug，二是找 Bug。</p><p>说归说笑归笑，奈何话糙理不糙：在程序员的工作中，Bug的排查分析和解决验证确实占相当可观的一部分时间。<br>那么说到，而在真正排查 Bug 时，才深刻体会到另一名句：不写日志一时爽，排查 Bug 火Z场。</p><p>日志管理，一直是开发人员的老大难题。这个老大难题，大致分为几块内容：</p><h3 id="1-打印日志"><a href="#1-打印日志" class="headerlink" title="1. 打印日志"></a>1. 打印日志</h3><p>狭义上的日志管理，也即打印日志。套用 3W1H 分析方法可以分为几个子问题：</p><ol><li><p>Why 为什么要打日志<br> 显而易见，日志是记录关键信息和数据的地方，以备未来排查问题和数据统计分析之用。</p></li><li><p>What 要打什么样的日志</p></li><li><p>Where&#x2F;When 在哪里&#x2F;什么时候打日志</p></li><li><p>How 怎么打日志</p></li></ol><h3 id="2-记录日志"><a href="#2-记录日志" class="headerlink" title="2. 记录日志"></a>2. 记录日志</h3><h3 id="3-查看日志"><a href="#3-查看日志" class="headerlink" title="3. 查看日志"></a>3. 查看日志</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;曾不知在哪听过一经典名句：程序员的工作有两件事，一是写 Bug，二是找 Bug。&lt;/p&gt;
&lt;p&gt;说归说笑归笑，奈何话糙理不糙：在程序员的工作中，Bug的排查分析和解决验证确实占相当可观的一部分时间。&lt;br&gt;那么说到，而在真正排查 Bug 时，才深刻体会到另一名句：不写日志一</summary>
      
    
    
    
    <category term="Technology" scheme="https://amonxu.com/categories/Technology/"/>
    
    
    <category term="k8s" scheme="https://amonxu.com/tags/k8s/"/>
    
    <category term="log" scheme="https://amonxu.com/tags/log/"/>
    
    <category term="阿里云" scheme="https://amonxu.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    <category term="docker" scheme="https://amonxu.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>《中国折叠》</title>
    <link href="https://amonxu.com/2022/08/18/zh-CN/2022-08-18-Folding-World/"/>
    <id>https://amonxu.com/2022/08/18/zh-CN/2022-08-18-Folding-World/</id>
    <published>2022-08-17T17:01:01.000Z</published>
    <updated>2023-09-04T09:54:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>我折叠了中国，<br>因为我想你，<br>想你到突破几何距离。</p><p>广东和江西叠在一起，<br>你叠进我的身体。</p><blockquote><p>写给一对分隔粤赣两地的恋人</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我折叠了中国，&lt;br&gt;因为我想你，&lt;br&gt;想你到突破几何距离。&lt;/p&gt;
&lt;p&gt;广东和江西叠在一起，&lt;br&gt;你叠进我的身体。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;写给一对分隔粤赣两地的恋人&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="诗" scheme="https://amonxu.com/categories/%E8%AF%97/"/>
    
    
    <category term="诗" scheme="https://amonxu.com/tags/%E8%AF%97/"/>
    
    <category term="2022" scheme="https://amonxu.com/tags/2022/"/>
    
  </entry>
  
</feed>
